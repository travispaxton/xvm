name: XVM Release Workflow

#
# Perhaps: The release flow is manually triggered, and will release a snapshot version.
# If a release already exists, it will either fail or delete it. If it's a draft, it will redo it.
# Bump the SNAPSHOT version? Or just release current version. It may be confusing to react specially
# and perform a release action just by changing to a non-SNAPSHOT.
#
on:
  workflow_dispatch: # Allows manual triggering from GitHub Actions UIon:
    inputs:
      trigger_manual_release:
        type: choice
        required: true
        default: 'false'
        options:
          - 'true'
          - 'false'
        description: Trigger a manual release
    #push:
    # TODO let the xvm-build-verify action ensure release tags too. It should already be doing that.
    #tags:
    #  - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10'
    #branches:
    # TODO: MASTER
    #   - simplify-tasks

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-release-artifacts:
    name: Build and Create Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          show-progress: true
          fetch-depth: 0 # Full depth for accurate tags
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 21
      - name: Reset release state
        shell: bash
        run: |
          echo "TODO: Here we should reset the release state, delete existing draft releases etc, if necessary."
      - name: Read VERSION File
        id: read_version
        shell: bash
        run: |
          echo "Checking ref_name: ${{ github.ref_name }}"
          VERSION=$(cat VERSION)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          if [[ "$VERSION" == *"SNAPSHOT"* ]]; then
            echo "This is a SNAPSHOT version. Skipping release."
            exit 0
          else
            echo "This is a release version. Proceeding with release."
            current_release="$VERSION"
            echo "CURRENT_RELEASE=v$VERSION" >> $GITHUB_ENV
          fi 
          last_release=$(gh release view --json tagName  -q '.tagName')
          echo "LAST_RELEASE=$last_release" >> $GITHUB_ENV
          if [ "$current_release" == "$last_release" ]; then
            echo "This version has already been released. Skipping release."
            exit 1
          fi
          echo "ARTIFACT_SUFFIX=tar.gz" >> $GITHUB_ENV
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            echo "This is a Windows build."
            echo "OS_NAME=windows" >> $GITHUB_ENV
            echo "ARTIFACT_SUFFIX=zip" >> $GITHUB_ENV
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            echo "This is a MacOS build."
            echo "OS_NAME=macos" >> $GITHUB_ENV
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            echo "This is a Linux build."
            echo "OS_NAME=linux" >> $GITHUB_ENV
          else
            echo "Fatal error - cannot resolve ${{ matrix.os }} to a known OS."
            exit 1
          fi
          # TODO: Ensure tag is created
      - name: Build distribution with Gradle
        if: env.CURRENT_RELEASE != ''
        run: |
          echo "OS_NAME: ${{ env.OS_NAME }}, ARTIFACT_SUFFIX: ${{ env.ARTIFACT_SUFFIX }}"
          ./gradlew xdk:withLaunchersDistTar
          ./gradlew xdk:withLaunchersDistZip
          # TODO: Also publish release artifact. Copy credentials from other file
      - name: Check if commit is tagged
        id: check_tag
        shell: bash
        run: |
          # TODO: Just use github.ref like a normal person
          if git tag --contains ${{ github.sha }} | grep -q ${{ env.VERSION }}"; then
            echo "Tag release version tag already exists for the latest commit."
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Tag release version tag already exists for the latest commit."
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
            exit 1 # Should have been created in build with -PsnapshotOnly = false
          fi
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: xdk-${{ env.VERSION }}-${{ env.OS_NAME }}.${{ env.ARTIFACT_SUFFIX }}
          path: xdk/build/distributions/xdk*${{ env.OS_NAME }}*.${{ env.ARTIFACT_SUFFIX }}
      - name: Install GitHub CLI (if necessary)
        run: |
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            sudo apt-get update
            sudo apt-get install gh
          fi

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-release-artifacts  # This job will wait for all builds to complete
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          show-progress: true
          fetch-depth: 0
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Create Release
        if: env.CURRENT_RELEASE != ''
        run: |
          gh release create ${{ env.VERSION }} \
            --title "XDK ${{ env.VERSION }}" \
            --notes "Release notes for XDK ${{ env.VERSION }}" \
            --prerelease false \
            --draft
      - name: Upload Release Assets
        if: env.CURRENT_RELEASE != ''
        run: |
          gh release upload ${{ env.VERSION }} \
            ./artifacts/xdk-${{ env.VERSION }}-*.${{ env.ARTIFACT_SUFFIX }}
